'''
1. Реализовать алгоритм сортировки выбором. Я это не объяснял, но задача преследует следующие цели :
    1. Гугление. Самостоятельный поиск объяснения логики алгоритма, т.е  не готовую реализацию в виде кода !!!
    3. Переформатирования мозга. При встрече, мне нужно объяснить код алгоритма, то как ты его понимаешь.
    3. Циклы и условные конструкции. Решаем вопрос с пониманием циклов и условиях.
	
	
def select_def(v_list):
    for k in range (len(v_list)):
        for i in range(len(v_list[k]) - 1):
            m = i
            j = i + 1
            while j < len(v_list[k]):
                if v_list[k][j] < v_list[k][m]:
                    m = j
                j = j + 1
            v_list[k][i], v_list[k][m] = v_list[k][m], v_list[k][i]  
    return v_list
t = [[80, 99, 41, 58, 7, 4, 14],[34, 99, 71, 3, 5, 4, 59]]
select_def(t)	

	
2. Алгоритм пузырьковой сортировки упаковать в функцию bubble_def, которая обернута в декоратор decor_def,
    который считает время выполнения bubble_def и выводит информацию в файл start_end.txt.
    bubble_def принимает на вход произвольный список СПИСКОВ В КОТОРЫХ ПРОИЗВОЛЬНОЕ КОЛ-ВО ЭЛЕМЕНТОВ ТИПА int.
    [[4,1...n],[6,4,3...n]...n]
    Возращает отсортированЫЕ спискИ.
    [[1,4...n],[3,4,6...n]...n]

import time
import sys
path_log = 'C:/Users/NorM/Desktop/dz/start_end.txt'

def decor_def(user_func):
    def wrapp(arg):
        first_time = time.time()
        sys.stdout = open(path_log, 'a')
        #print('запоминам текущее время в first_time', first_time)
        a = user_func(arg)
        print('start_end', time.time() - first_time)
        print(a)
        sys.stdout.close()
        return a
    return wrapp
    
    
@decor_def
def bubble_def(p_list):
    print(p_list)
    for k in range (len(p_list)):
        for i in range (len(p_list[k])-1):
            for j in range(len(p_list[k])-1-i):
                if p_list[k][j]>p_list[k][j+1]:
                    p_list[k][j],p_list[k][j+1]=p_list[k][j+1],p_list[k][j]
    return p_list

p_list=[[8,3,7,6,5,4,9,2,1],[8,3,7,6,5,4,9,2,1]]
bubble_def(p_list)
3. Алгоритм пузырьковой сортировки тоже переделать под списки списков, для сравнения скорости двух алгоритмов (пузырьковой и выбором)

import time
import sys
path_log = 'C:/Users/NorM/Desktop/dz/start_end.txt'	
	

def decor_def(user_func):
    def wrapp(arg):
        first_time = time.time()
        sys.stdout = open(path_log, 'a')
        #print('запоминам текущее время в first_time', first_time)
        b = user_func(arg)
        print('start_end', time.time() - first_time)
        print(b)
        sys.stdout.close()
        return b
    return wrapp	

@decor_def	
def select_def(v_list):
    for k in range (len(v_list)):
        for i in range(len(v_list[k]) - 1):
            m = i
            j = i + 1
            while j < len(v_list[k]):
                if v_list[k][j] < v_list[k][m]:
                    m = j
                j = j + 1
            v_list[k][i], v_list[k][m] = v_list[k][m], v_list[k][i]  
    return v_list	

t = [[80, 99, 41, 58, 7, 4, 14],[34, 99, 71, 3, 5, 4, 59]]
select_def(t)
